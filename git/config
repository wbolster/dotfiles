[user]
name = wouter bolsterlee
email = wouter@bolsterl.ee

[github]
user = wbolster

[absorb]
maxStack = 100

[alias]

# Generic
branch-name = symbolic-ref --short HEAD

# Identity
whoami = "!f() { printf '%s <%s>\n' \"$(git config --get user.name)\" \"$(git config --get user.email)\" ; }; f"

# It's not all bad
praise = blame

# Committing
ci = commit
amend = commit --amend
cav = commit --all --verbose
cv = commit --verbose
cvp = commit --verbose --patch
fixup = commit --amend --no-edit
recommit = commit --amend --no-edit --reset-author
uncommit = reset --soft HEAD^

# Adding
ap = add --patch
au = add --update :/
touch = "!f() { touch -- \"$@\"; git add -- \"$@\";  }; f"

# Diff
di = diff
dif = diff
cdiff = diff --cached --find-renames
cwdiff = diff --cached --word-diff
sdiff = diff --ignore-all-space --find-renames
wdiff = diff --word-diff

# Inspecting
ls = ls-files
mylog = "!f() { git log --all --author=\"$(git config user.email)\" --date-order --graph --format='%C(yellow)[%h] %ai (%ar)%C(auto)%d%n%n%C(reset)%s %n%+b' \"$@\"; }; f"
review-branch = "!f() { [ -z \"$@\" ] && set - "@{upstream}.."; git -c core.pager='less -+F +/^commit' log --reverse --patch \"$@\"; }; f"
sl = log --oneline --graph --pretty=longline --date=short
message-log = log --pretty=message
log-merge-request-long=log-pull-request-long
log-merge-request = log-pull-request
log-pull-request-long = log --reverse --format=markdown-long "@{upstream}.."
log-pull-request = log --reverse --format=markdown "@{upstream}.."
log-since-tag = "!f() { git log $(git describe --tags --abbrev=0 @^)..@ \"$@\"; }; f"
log-since-tag-only-merges = "!f() { git log-since-tag --merges --oneline --no-decorate \"$@\"; }; f"
log-since-tag-only-merges-markdown = "!f() { git log-since-tag-only-merges \"$@\" | sed -E 's/^([a-f0-9]+) (merge: )?(.*) \\(([^)]+)\\)/- *\\3* (\\4, `g\\1`)/'; }; f"
log-since-tag-only-authors = "!f() { git log-since-tag --format=tformat:%aN%n%cN | sort -u; }; f"
slf = sl --first-parent
st = status --short --branch
today = log --all --graph --since=0am
topology = log --oneline --graph --all --simplify-by-decoration

# Branching, merging, and updating
# http://stackoverflow.com/questions/914939/simple-tool-to-accept-theirs-or-accept-mine-on-a-whole-file-using-git
accept-ours = "!f() { [ -z \"$@\" ] && set - '.'; git checkout --ours -- \"$@\"; git add --update -- \"$@\"; }; f"
accept-theirs = "!f() { [ -z \"$@\" ] && set - '.'; git checkout --theirs -- \"$@\"; git add --update -- \"$@\"; }; f"
br = branch --verbose
bra = branch --all --verbose
co = checkout
cob = checkout -b
delete-merged-branches = "!f() { git branch --merged | grep --invert-match '*' | xargs --no-run-if-empty git branch --delete; }; f"
delete-unused-branches = "!f() { git branch | grep --invert-match '*' | xargs --no-run-if-empty git branch --delete; }; f"
ff = merge --ff-only
merge-feature = merge --no-ff --edit
merge-issue = merge --no-ff --edit
# https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
merge-find = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
merge-show = "!sh -c 'merge=$(git merge-find $0 $1) && [ -n \"$merge\" ] && git show $merge'"
missing = "!f() { (echo \"Only in $1:\"; git --no-pager sl ..$1; echo; echo 'Only in HEAD:'; git --no-pager sl $1..;) | less -FRSX; }; f"

# Updating from and pushing to remotes
fetchall = fetch --all --prune
fpush = push --force-with-lease
pshu = push
psuh = push
puhs = push
publish = "!f() { git push --verbose --set-upstream origin $(git branch-name); }; f"
unpublish = "!f() { git push --verbose origin --delete $(git branch-name) ; }; f"
unpush1 = "!f() { git push --verbose --force-with-lease origin HEAD^:$(git branch-name); }; f"
up = "!f() { git fetch --prune && git merge --ff-only @{u}; }; f"

# Rebasing, rewriting history, and so on
plagiarize = filter-branch --env-filter "'export GIT_AUTHOR_NAME=\"$(git config user.name)\"; export GIT_AUTHOR_EMAIL=\"$(git config user.email)\"; export GIT_COMMITTER_NAME=\"$(git config user.name)\"; export GIT_COMMITTER_EMAIL=\"$(git config user.email)\"'"
rb = rebase
rba = rebase --abort
rbas = rebase --autostash
rbc = rebase --continue
rbi = rebase --interactive
rbiom = rebase --interactive @{upstream}
rbom = rebase @{upstream}

# Grep
igrep = grep --ignore-case
fgrep = grep --fixed-strings
figrep = grep --fixed-strings --ignore-case
cgrep = grep --context 5
cigrep = grep --context 5 --ignore-case

# Paths
relpath = rev-parse --show-prefix
toplevel = rev-parse --show-toplevel

# Stash
stashk = stash save --keep-index
stashp = stash pop
unstash = stash pop

# Github shortcuts https://github.com/github/hub
pr = pull-request

[branch]
autosetuprebase = always

[checkout]
workers = 0

[color]
ui = auto

[diff]
algorithm = histogram
colorMoved = default
noprefix = true
tool = difftastic

[diff "gettext-mo"]
textconv=msgunfmt --force-po --no-wrap --sort-output

[diff "gettext-po"]
textconv=msgcat --no-location --no-wrap --sort-output

[difftool]
prompt = false

[difftool "difftastic"]
cmd = difft "$LOCAL" "$REMOTE"

[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true

[init]
defaultBranch = main

[interactive]
singlekey = true

[log]
decorate = short
date = iso8601

[merge]
conflictstyle = diff3
defaultToUpstream = true
log = 100
tool = gvimdiff

[pretty]
longline = "%C(yellow)%h%C(auto) %s %C(cyan)â€” %aN, %ad%C(auto)%d"
message = "- %w(0,0,2)%B"
markdown = "- %w(0,0,2)**%s**%n%n%b"
markdown-long = "#### %s%n%n%b"
summary = "tformat:%s"
items = "tformat:- %s"

[pull]
ff = only
rebase = preserve

[push]
default = simple
followTags = true

[rebase]
stat = true
updateRefs = true

[rerere]
enabled = true

[url "ssh://git@github.com/"]
insteadOf = github:

[include]
path = config-local
