#!/bin/sh

set -eu

main() {
    # Dispatch based on how this script was invoked (via symlinks)
    subcommand=$(basename "$0")
    subcommand=${subcommand#git-}

    case "$subcommand" in
        branches-overview)
            branches_overview "$@"
            ;;
        delete-completed-branches)
            delete_completed_branches "$@"
            ;;
        *)
            echo "unknown subcommand: ${subcommand}" > /dev/stderr
            exit 1
            ;;
    esac
}

delete_completed_branches() {
    target="${1-}"

    # Ensure this is run inside a git repo.
    git rev-parse --show-toplevel > /dev/null

    if ! default_upstream=$(get_default_upstream); then
        default_upstream=''
    fi

    current_branch=$(git symbolic-ref --short HEAD)

    echo
    print_divider
    echo

    for branch in $(list_branches); do
        printf "🔎  Found local branch $(color yellow)‘%s’$(color off) (%s)\n" "$branch" "$(git rev-parse --short "$branch")"

        if [ "$branch" = "$current_branch" ]; then
            upstream=''
            printf "📌  Refusing to operate on currently checked out branch; skipping\n"
        elif [ -n "$target" ]; then
            # FIXME: does not work with a branch name
            upstream=$(git symbolic-ref --short "$target")
            message="🎯  Comparing against explicit target branch"
        elif upstream=$(get_branch_upstream "${branch}"); then
            # Branch has a configured upstream.
            message="🆙  Comparing against configured upstream"
        elif [ -n "$default_upstream" ]; then
            upstream="$default_upstream"
            message="🆙  No upstream configured; comparing against default remote HEAD"
        else
            upstream=''
            printf "😱  Cannot determine upstream; skipping\n"
        fi

        if [ -n "$upstream" ]; then
            printf "%s $(color yellow)‘%s’$(color off) (%s)\n" "$message" "$upstream" "$(git rev-parse --short "$upstream")"

            if details=$(branch_fully_present_in_target "$branch" "$upstream"); then
                printf '✅  Local changes included upstream (%s)\n' "$details"
                if ask_confirmation "🚮  Delete branch ‘${branch}’?"; then
                    color red
                    git branch --delete --force --quiet "$branch"
                    color off
                fi
            else
                printf "❌  Local changes not fully contained in upstream branch; $(color green)keeping branch$(color off)%s\n" ''
                echo '💡  Commits not in upstream branch:'
                echo
                git --no-pager log --format='tformat:    %h %s' "${upstream}..${branch}"
                echo
                echo "📃  Details:"
                echo
                printf '    git log %s..%s\n' "$upstream" "$branch"
                echo
                printf '    git diff %s...%s\n' "$upstream" "$branch"
                echo
            fi
        fi

        if branch_exists "$branch"; then
            printf "🌱  $(color green)Kept local branch ‘%s’$(color off)\n" "$branch"
        else
            printf "💀  $(color red)Deleted branch ‘%s’$(color off)\n" "$branch"
        fi

        echo
        print_divider
        echo
    done

    echo '🌳  Remaining branches:'
    echo
    branches_overview

    echo ‍"🤓  Happy hacking!"
}

get_default_remote () {
    remotes="$(git remote show)"
    if [ "$(echo "$remotes" | wc -l)" = "1" ]; then
        # If there is a single remote, use it.
        remote=$(echo "$remotes" | head -n 1)
    elif remote=$(git remote show | grep -F -x origin); then
        : # If there is a remote named ‘origin’, use it.
    else
        return 1
    fi
    echo "${remote}"
}

get_default_upstream() {
    git symbolic-ref "refs/remotes/$(get_default_remote)/HEAD"
}

get_branch_upstream() {
    branch="$1" && shift
    git rev-parse --symbolic-full-name "${branch}@{upstream}" 2>/dev/null
}

list_branches() {
    git for-each-ref refs/heads/ \
        --format='%(refname:short)' \
        --sort=refname \
        --sort='authordate'
}

branch_exists() {
    branch="$1" && shift
    git show-ref --verify --quiet "refs/heads/${branch}"
}

branch_sha() {
    branch="$1" && shift
    git rev-parse --short "refs/heads/${branch}"
}

branch_fully_present_in_target() {
    branch="$1" && shift
    target_branch="$1" && shift
    merge_base=$(git merge-base "$target_branch" "$branch")
    branch_tree=$(git rev-parse "${branch}^{tree}")
    target_branch_tree=$(git rev-parse "${target_branch}^{tree}")

    # If branches point to the same tree, by definition no changes are missing.
    if [ "$branch_tree" = "$target_branch_tree" ]; then
        echo "points to same tree"
        return 0
    fi

    # Check normal merges.
    if git merge-base --is-ancestor "$branch" "$target_branch"; then
        echo "branch already merged"
        return 0
    fi

    # Check ‘squashed merges’. Make a temporary commit on top of the
    # merge base with all the changes from the branch. Then use ‘git
    # cherry’ to see if there are any changes missing from the target
    # branch. If that is the case, the output starts with a plus sign.
    # If all changes are already part of the target branch, the output
    # starts with a minus sign.
    commit=$(
        git commit-tree \
            "$branch_tree" \
            -p "$merge_base" \
            -m "Temporary commit to check ‘${branch}’ against ‘${target_branch}’" \
            -m "Merge base: ${merge_base}" \
            -m "Checking: $(git rev-parse "${branch}")" \
            -m "Target: $(git rev-parse "${target_branch}")" \
          )
    if git cherry "$target_branch" "$commit" | grep -q ^-; then
        echo "cherry-picked, squashed, or otherwise included"
        return 0
    fi

    return 1
}

branches_overview() {
    for branch in $(list_branches); do
        date=$(git log --max-count=1 --format=%ad "refs/heads/$branch")
        log_args="$branch"
        if upstream=$(get_branch_upstream "${branch}"); then
            log_args="$upstream".."$branch"
        fi

        printf "$(color yellow)%s$(color off) (%s)\n" "$branch" "$date"
        git --no-pager log --max-count=10 --format='tformat:* %s' "$log_args"
        echo
    done
}

ask_confirmation() {
    message="$1"
    printf "%s (y/n) " "$message"  # no newline
    read -r answer
    if [ "$answer" = "y" ]; then
        return 0;
    else
        return 1
    fi
}

print_divider() {
    echo 🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟 🦈
}

color() {
    case "$1" in
        red)
            tput setaf 1
            ;;
        green)
            tput setaf 2
            ;;
        yellow)
            tput setaf 3
            ;;
        off)
            tput sgr0
            ;;
        *)
            exit 1
            ;;
    esac
}

main "$@"
