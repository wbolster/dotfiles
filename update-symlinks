#!/usr/bin/python

import logging
import os
import sys

DEFAULT_SYMLINKS_FILE = 'symlinks.conf'
LOGGING_FORMAT = '%(levelname)s: %(message)s'
LINK_SEPARATOR = ' -> '
HOME_DIR = os.path.realpath(os.path.expanduser('~'))

logger = logging.getLogger(__name__)


def bailout(msg, *args):
    logging.error(msg, *args)
    logging.error("Exiting...")
    sys.exit(1)

if __name__ == '__main__':
    config_dir = os.path.realpath(os.path.join(os.path.dirname(__file__)))

    try:
        symlinks_file = sys.argv[1]
    except IndexError:
        symlinks_file = os.path.join(config_dir, DEFAULT_SYMLINKS_FILE)

    logging.basicConfig(format=LOGGING_FORMAT, level=logging.DEBUG)

    os.chdir(HOME_DIR)

    for line in open(symlinks_file):

        line = line.strip()

        if line == '' or line.startswith('#'):
            continue

        if LINK_SEPARATOR not in line:
            bailout("Line does not contain arrow: %r", line)

        symlink_from, symlink_to = line.split(LINK_SEPARATOR)
        symlink_from = symlink_from.strip()
        symlink_to = symlink_to.strip()

        if symlink_to.startswith('~') or symlink_to.startswith('/') or symlink_to.startswith('..'):
            bailout("Destination path is not relative to configuration directory: %r", symlink_to)

        if not symlink_from.startswith('~/'):
            symlink_from = '~/%s' % symlink_from

        while symlink_from.endswith('/'):
            symlink_from = symlink_from[:-1]

        symlink_from_full = os.path.expanduser(symlink_from)
        symlink_to_start = os.path.realpath(os.path.dirname(symlink_from_full))
        symlink_to_full = os.path.relpath(os.path.join(config_dir, symlink_to), symlink_to_start)

        should_link = True
        if os.path.lexists(symlink_from_full):
            if not os.path.islink(symlink_from_full):
                bailout("'%s' exists; move it out of the way first", symlink_from)

            if os.path.exists(symlink_from_full) and os.path.samefile(os.path.realpath(symlink_from_full), symlink_to_full):
                logger.info("%s already setup correctly", symlink_from_full)
                should_link = False
            else:
                logger.warn("Overwriting existing symlink %s (pointed to %s)",
                            symlink_from, os.path.realpath(symlink_from_full))

        if should_link:
            logger.info("Linking %s -> %s", symlink_from, symlink_to_full)
            if os.path.lexists(symlink_from_full):
                os.unlink(symlink_from_full)
            os.symlink(symlink_to_full, symlink_from_full)
