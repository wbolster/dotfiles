#!/usr/bin/env bash
# Bash Configuration

___readlink_f() {
    if [[ "$OSTYPE" == darwin* ]]; then
        # Ad-hoc bootstrap-only version before coreutils installed via
        # Homebrew in the path, because OSX does not have readlink -f.
        echo "$(dirname "$1")/$(readlink "$1")"
    else
        readlink -f "$1"
    fi
}

# Paths to configuration directories.
_dotfiles_root="$(dirname "$(dirname "$(___readlink_f "${BASH_SOURCE[0]}")")")"

# Useful helpers, mostly lifted from ‘direnv stdlib’
___has() {
  type "$1" &>/dev/null
}
___PATH_add() {
  ___path_add PATH "$@"
}
___path_add() {
  local path i var_name="$1"
  declare -a path_array
  IFS=: read -ra path_array <<<"${!1-}"
  shift
  for ((i = $#; i > 0; i--)); do
    path_array=("$(___expand_path "${!i}")" ${path_array[@]+"${path_array[@]}"})
  done
  path=$(
    IFS=:
    echo "${path_array[*]}"
  )
  export "$var_name=$path"
}
___expand_path() {
  local REPLY; ___realpath.absolute "${2+"$2"}" "${1+"$1"}"; echo "$REPLY"
}
___realpath.dirname() { REPLY=.; ! [[ $1 =~ /+[^/]+/*$|^//$ ]] || REPLY="${1%${BASH_REMATCH[0]}}"; REPLY=${REPLY:-/}; }
___realpath.basename(){ REPLY=/; ! [[ $1 =~ /*([^/]+)/*$ ]] || REPLY="${BASH_REMATCH[1]}"; }
___realpath.absolute() {
  REPLY=$PWD; local eg=extglob; ! shopt -q $eg || eg=; ${eg:+shopt -s $eg}
  while (($#)); do case $1 in
    //|//[^/]*) REPLY=//; set -- "${1:2}" "${@:2}" ;;
    /*) REPLY=/; set -- "${1##+(/)}" "${@:2}" ;;
    */*) set -- "${1%%/*}" "${1##${1%%/*}+(/)}" "${@:2}" ;;
    ''|.) shift ;;
    ..) ___realpath.dirname "$REPLY"; shift ;;
    *) REPLY="${REPLY%/}/$1"; shift ;;
  esac; done; ${eg:+shopt -u $eg}
}
___path_add_if_exists() {
    local var_name="${1:?}"; shift
    local dirs=()
    for dir in "$@"; do
        if [ -d "$dir" ]; then
            dirs+=("$dir")
        fi
    done
    ___path_add "$var_name" "${dirs[@]}"
}

# Helper to keep only the first occurence of each component of a
# colon-separated path string.
_deduplicate_path_components() {
    echo "$1" | awk -v RS=: -v ORS=: '!a[$1]++' | sed -e 's/:$//'
}

# Find the closest parent directory that contains a descendant.
# Starts from the current working directory unless overridden.
_closest_parent_dir_containing() {
    local descendant="${1:?}"
    local dir="${2:-$(pwd)}"
    while true; do
        if [ -e "$dir/$descendant" ]; then
            echo "$dir"
            return 0
        elif [ "$dir" = '/' ]; then
            return 1;
        fi
        dir="$(dirname "$dir")"
    done
}

# Paths:
# - add some dirs in $HOME
# - add dirs from Homebrew (on OSX)

export MANPATH="${MANPATH:-}"
export NPM_CONFIG_USERCONFIG=${XDG_CONFIG_HOME:-$HOME/.config}/npm/npmrc
export npm_config_cache=${XDG_CACHE_HOME:-$HOME/.cache}/npm
export npm_config_prefix=${HOME}/.local/npm

if [[ -z "$MANPATH" ]] && ___has manpath; then
    MANPATH+=$(manpath)
fi

if [[ "$OSTYPE" == darwin* ]]; then
    if ___has /opt/homebrew/bin/brew; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    elif ___has brew; then
        HOMEBREW_PREFIX=$(brew --prefix)
    fi
    ___path_add_if_exists PATH \
        "${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnubin" \
        "${HOMEBREW_PREFIX}/opt/findutils/libexec/gnubin" \
        "${HOMEBREW_PREFIX}/sbin" \
        "${HOMEBREW_PREFIX}/bin"
    ___path_add_if_exists MANPATH \
        "${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnuman"
fi

___path_add_if_exists PATH \
    ~/.local/bin \
    ~/bin \
    "${_dotfiles_root}/bin" \
    "${npm_config_prefix}/bin" \
    ~/.cargo/bin \
    ~/.pyenv/shims \
    ~/.local/share/mise/shims \
    ~/.local/share/rtx/shims \
    /opt/bin
___path_add_if_exists MANPATH \
    ~/.local/man \
    "${npm_config_prefix}/share/man"

PATH=$(_deduplicate_path_components "$PATH")
MANPATH=$(_deduplicate_path_components "$MANPATH")

# Interactive shells
if [[ "$PS1" ]]; then
    # Helper to emulate "set -x" output
    _run_verbose() {
        (
            # Strip visible escape sequences from $PS4; bash prompting works differently from echo.
            printf "%b" "${PS4}" | sed -e 's/\\\[//g' -e 's/\\\]//g'
            echo "$@"
        ) >&2
        "$@"
    }

    join_by () {
        local IFS="$1"
        shift
        echo "$*"
    }

    if ! ___has rev; then
        # the rev(1) program is not available on all systems
        # https://stackoverflow.com/questions/11461625/reverse-the-order-of-characters-in-a-string
        rev() {
            while read -r line
            do
                reversed=""
                for (( i=0 ; i<${#line} ; i++ )); do
                    reversed="${line:i:1}${reversed}";
                done
                echo "$reversed"
            done
        }
    fi

    shorten_path() {
        # shorten a directory name. keep last n components intact and
        # truncate the components in front of it (with special
        # handling of .hidden components). add an ellipsis when the
        # value has been truncated.
        dir=$1
        n=$2
        dir=${1##$HOME/}
        tail=$(echo "$dir" | rev | cut -d/ -f"-${n}" | rev)
        head=${dir%%$tail}
        if [ -n "$head" ]; then
            # shellcheck disable=SC2001
            head=$(echo "$head" | sed -e 's#\(\(\.\?[^/]\{1\}\)[^/]\+/\?\)#\2/#g')
            head="${head%%/}…/"
        fi
        echo "${head}${tail}"
    }

    # libvte uses a helper script to echo the current directory in an
    # escape sequence in the the prompt. gnome-terminal uses this to
    # open new terminal tabs/windows in the same directory.
    if ___has __vte_osc7; then
        # Redefine the function to use escape sequences that do
        # not leave visual artefacts.
        __vte_osc7 () {
            printf "\[\e]7;file://%s%s\a\]" "$HOSTNAME" "$(/usr/lib/vte-urlencode-cwd)"
        }
    else
        __vte_osc7 () { :; }  # do-nothing stub
    fi

    # Git status in prompt using __git_ps1()
    if [[ -f /usr/share/git/completion/git-prompt.sh ]]; then
        source /usr/share/git/completion/git-prompt.sh
    fi
    unset git_prompt_sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUPSTREAM="git verbose"

    # Trailing newline warning using cursor column detection
    #
    # The "tput u7" (user string #7) for xterm results in the required "\e[6n"
    # escape sequence, but this user string is not available for all terminal
    # types. (The "screen" term does not have it, for example.)
    _prompt_newline_warning_enabled=0;
    _prompt_enable_newline_warning() {
        if [[ -n "$(echo -en "\e[6n")" ]]; then
            _prompt_newline_warning_enabled=1;
            _cursor_column() {
                exec < /dev/tty
                local stty_save
                stty_save=$(stty -g)
                stty raw -echo min 0
                echo -en "\e[6n" > /dev/tty
                stty "$stty_save"
                local curcol
                read -r -s -d _ curcol
                curcol="${curcol##*;}"
                echo -n "$curcol"
            }
        else
            _prompt_newline_warning_enabled=0;
            echo -e "\e[1;31mWarning: terminal does not support cursor column detection; newline detection disabled"
        fi
    }
    _prompt_disable_newline_warning() {
        _prompt_newline_warning_enabled=0;
    }

    # Time range formatting
    _fmt_seconds_elapsed() {
        local n=$1
        local output=""
        local h=$((n / 3600))
        [[ $h -gt 0 ]] && output+="${h}h"
        n=$((n % 3600))
        local m=$((n / 60))
        [[ $m -gt 0 ]] && output+="${m}m"
        s=$((n % 60))
        output+="${s}s"
        echo "$output"
    }

    _pwd_is_local_fs() {
        if [[ "$PWD" == /run/user/*/gvfs/* ]]; then
            return 1
        fi
        return 0
    }

    # Use a DEBUG trap to store timer information before a command is executed.
    # The _timer_start variable is cleared in the prompt command function.
    _timer_start=''
    trap '[[ -z "${_timer_start:-}" ]] && _timer_start=${SECONDS}' DEBUG

    set_prompt_command() {
        # Save exit code from previous command
        local prev_exit_code=$?

        # Colour definitions
        local colour_normal="\[\e[0m\]"
        # local colour_black="\[\e[0;30m\]"
        # local colour_black_bold="\[\e[1;30m\]"
        local colour_red="\[\e[0;31m\]"
        # local colour_red_bold="\[\e[1;31m\]"
        local colour_green="\[\e[0;32m\]"
        # local colour_green_bold="\[\e[1;32m\]"
        local colour_yellow="\[\e[0;33m\]"
        # local colour_yellow_bold="\[\e[1;33m\]"
        local colour_blue="\[\e[0;34m\]"
        # local colour_blue_bold="\[\e[1;34m\]"
        local colour_purple="\[\e[0;35m\]"
        # local colour_purple_bold="\[\e[1;35m\]"
        local colour_cyan="\[\e[0;36m\]"
        # local colour_cyan_bold="\[\e[1;36m\]"
        # local colour_white="\[\e[0;37m\]"
        # local colour_white_bold="\[\e[1;37m\]"

        # Error
        local prompt_err=""
        if [[ ${prev_exit_code} -ne 0 ]]; then
            local exit_status=${prev_exit_code}
            # Lookup signal numbers between 0 and 64; these are returned as
            # exit codes between 128 and 192
            if [[ ${prev_exit_code} -gt 128 && ${prev_exit_code} -lt 192 ]]; then
                exit_status=$((128-prev_exit_code))" "$(kill -l ${prev_exit_code} 2>/dev/null || echo -n '?')
            fi
            prompt_err="exit ${exit_status} 💥"
        fi

        # Time since previous command
        local prompt_timer=""
        if [[ -n "$_timer_start" ]]; then
            local seconds_elapsed=$((SECONDS - _timer_start))
            local current_date
            current_date=$(date --iso-8601=seconds)
            if [[ $seconds_elapsed -ge 10 ]]; then
                seconds_elapsed=$(_fmt_seconds_elapsed ${seconds_elapsed})
                prompt_timer+="⌚  ${seconds_elapsed} elapsed; finished at ${current_date}"
            fi
            unset _timer_start
        fi

        # Save history so that newly opened shells immediately see it.
        history -a

        # Hook for direnv.
        if ___has _direnv_hook; then
            _direnv_hook
        fi

        # Show "umbrella name". This is useful for directories that act as
        # containers for projects, e.g. ~/Projects. By storing a short
        # word (or emoji!) in a file called ".umbrella" the prompt
        # will show that word and the name of the topmost child
        # directory under that umbrella dir.
        local prompt_umbrella=''
        local tt_umbrella=''
        local dir
        if _pwd_is_local_fs && dir=$(_closest_parent_dir_containing .umbrella); then
            prompt_umbrella=$(command cat "${dir}/.umbrella")
            if [ "$dir" != "$PWD" ]; then
                local relative="${PWD##${dir}/}"
                prompt_umbrella+=" ${relative/\/*/}"
            fi
            tt_umbrella="$prompt_umbrella"
            prompt_umbrella="${colour_blue}${prompt_umbrella}"
        fi

        # User name (only if non-standard)
        local prompt_user=""
        local prompt_user_colour="$colour_blue"
        local prompt_sign_colour="$colour_green"
        if [[ "$USER" == "root" ]]; then
            prompt_user_colour="$colour_red"
            prompt_sign_colour="$colour_red"
        fi
        case "$USER" in
            (wbolster|uws)
                prompt_user=""
                ;;
            (*)
                prompt_user="${colour_normal}🎭  ${prompt_user_colour}${USER}"
                ;;
        esac

        # Host name (only remote without screen/tmux)
        local prompt_hostname=""
        local tt_hostname=""
        if [[ -n "${SSH_CLIENT:-}" && "$TERM" != screen* ]]; then
            prompt_hostname="${colour_normal}💻  ${colour_blue}${HOSTNAME}"
            tt_hostname="$HOSTNAME"
        fi

        # Working directory
        local prompt_wd=""
        local tt_wd="\w"
        if [[ "$PWD" != "$HOME" ]]; then
            short_pwd=$(shorten_path "$PWD" 3)
            prompt_wd="${colour_normal}📁  ${colour_green}${short_pwd}"
            tt_wd="$short_pwd"
        fi

        # Git
        local prompt_git=""
        if _pwd_is_local_fs && ___has __git_ps1; then
            local _git_ps1_output
            _git_ps1_output="$(__git_ps1 '%s')"
            if [[ -n "$_git_ps1_output" ]]; then
                prompt_git="${colour_normal}🔀  ${colour_yellow}${_git_ps1_output}"
            fi
        fi

        # Python
        local prompt_python=""
        if [[ -n "${VIRTUAL_ENV:-}" ]]; then
            local venv_name
            if [[ "$VIRTUAL_ENV" == */.direnv/* ]]; then
                venv_name="$(basename "$(dirname "$(dirname "${VIRTUAL_ENV}")")")"
            else
                venv_name="$(basename "$VIRTUAL_ENV")"
            fi
            prompt_python+="${colour_cyan}${venv_name}"
        fi
        if [[ -n "${PYENV_VERSION:-}" && $(pyenv global | paste -sd:) != "$PYENV_VERSION" ]]; then
            if [[ -n "$prompt_python" ]]; then
                prompt_python+="${colour_normal}/"
            fi
            prompt_python+="${colour_cyan}${PYENV_VERSION}"
        fi
        if [[ -n "$prompt_python" ]]; then
            prompt_python="${colour_normal}🐍  ${prompt_python}"
        fi

        # gpg
        local prompt_gpg=""
        if [[ -n "${GNUPGHOME:-}" ]]; then
            prompt_gpg+="${colour_blue}🔏  ${GNUPGHOME}"
        fi

        # Warning when output does not have a trailing newline
        local prompt_newline_warning=""
        if [[ ${_prompt_newline_warning_enabled} -eq 1 ]]; then
            if [[ "$(_cursor_column)" -ne 1 ]]; then
                prompt_newline_warning="no newline"
            fi
        fi

        # Background jobs
        local prompt_jobs=""
        local n_jobs n_jobs_background n_jobs_suspended
        n_jobs="$(jobs -p | wc -w)"
        if [[ ${n_jobs} -gt 0 ]]; then
            n_jobs_background="$(jobs -p -r | wc -w)"
            n_jobs_suspended="$(jobs -p -s | wc -w)"
            prompt_jobs=""
            if [[ $((n_jobs_background + n_jobs_suspended)) -gt 0 ]]; then
                prompt_jobs="${colour_normal}🚂 "
            fi
            if [[ ${n_jobs_background} -gt 0 ]]; then
                prompt_jobs+=" ${colour_purple}${n_jobs_background}&"
            fi
            if [[ ${n_jobs_suspended} -gt 0 ]]; then
                prompt_jobs+=" ${colour_purple}${n_jobs_suspended}^Z"
            fi
        fi

        # Terminal title (execution/echoing embedded in $PS1)
        local term_title=""
        case $TERM in
            (xterm*|rxvt*)  term_title="\[\e]0;${tt_umbrella:+${tt_umbrella} }${tt_hostname:+${tt_hostname}:}${tt_wd}\a\]" ;;
        esac

        # Status line about previous command
        local status_line_previous=""
        status_line_previous+="${prompt_newline_warning:+\n${colour_red}${prompt_newline_warning}  }"
        status_line_previous+="${prompt_err:+${colour_red}${prompt_err}  }"
        status_line_previous+="${prompt_timer:+${colour_green}${prompt_timer}  }"
        status_line_previous="${status_line_previous%%  }"

        # Status line with other information
        # fixme: use array and join_by?
        local prompt_status_line_other=""
        prompt_status_line_other+="${prompt_user:+ ${prompt_user}}"
        prompt_status_line_other+="${prompt_hostname:+ ${prompt_hostname}}"
        prompt_status_line_other+="${prompt_umbrella:+ ${prompt_umbrella}}"
        prompt_status_line_other+="${prompt_python:+ ${prompt_python}}"
        prompt_status_line_other+="${prompt_wd:+ ${prompt_wd}}"
        prompt_status_line_other+="${prompt_git:+ ${prompt_git}}"
        prompt_status_line_other+="${prompt_gpg:+ ${prompt_gpg}}"
        prompt_status_line_other+="${prompt_jobs:+ ${prompt_jobs}}"
        prompt_status_line_other="${prompt_status_line_other## }"

        # Primary prompt
        PS1="\n"
        PS1+="$(__vte_osc7)"
        PS1+="$term_title"
        PS1+="${status_line_previous:+${status_line_previous%% }\n\n}"
        PS1+="${prompt_status_line_other:+${prompt_status_line_other%% }\n\n}"
        PS1+="${prompt_sign_colour}\\$""${colour_normal} "

        # Additional prompts
        PS2="${prompt_sign_colour}> ${colour_normal}"  # Secondary prompt (continuation lines)
        # PS4="${colour_purple}+ ${colour_normal}"  # Output from "set -x"
        # PS4=$(printf "%b" "${colour_purple}+ ${colour_normal}" \
                  # | sed -e 's/\\\[//g' -e 's/\\\]//g') # Output from "set -x"
    }
    unset PROMPT_COMMAND  # ensure it's not defined already (potentially as an array)
    PROMPT_COMMAND=set_prompt_command

    # Globbing. This makes both "echo *" (only non-hidden files) and "echo .*"
    # (only hidden files, ignoring . and ..) work as intended.
    GLOBIGNORE=".:.."
    shopt -u dotglob  # ... since setting GLOBIGNORE enables dotglob as a side effect :-(
    shopt -s extglob

    # Disable annoying beeps
    if ___has setterm; then
        setterm -blength 0 2>/dev/null
    fi

    # Completion
    for file in /usr/local/etc/bash_completion /usr/local/share/bash-completion/bash_completion /etc/bash_completion /usr/share/bash-completion/bash_completion; do
        if [[ -f "$file" ]]; then
            # shellcheck disable=SC1090
            source "$file"
            break  # stop after first match
        fi
    done
    if type __load_completion 2>/dev/null | grep -q XDG_DATA_HOME; then
        :  # bash-completion >2.8 automatically loads from ~.local/share/bash-completion/completions
    else
        local_completion_dir=${BASH_COMPLETION_USER_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/bash-completion}/completions
        if [[ -d $local_completion_dir ]]; then
            for file in "${local_completion_dir}"/*; do
                if [[ -f "$file" ]]; then
                    # shellcheck disable=SC1090
                    source "$file"
                fi
            done
            unset file
        fi
        unset local_completion_dir
    fi
    if [[ -f /usr/share/bash-complete-alias/complete_alias ]]; then
        # shellcheck disable=SC1094
        source /usr/share/bash-complete-alias/complete_alias
    fi
    unset complete_alias_sh

    # Directory changing (and creation)
    export CDPATH=.:~/Projects
    shopt -s autocd
    ..() { cd .. ; }
    -() { cd - ; }
    cd() {
        if [[ $# == 2 && "$1" != -* ]]; then
            # Two args, no options: do simple path replacement, e.g. "cd site1 site2".
            _run_verbose builtin cd "${PWD/$1/$2}"
        elif [[ -e "$1" && ! -d "$1" ]]; then
            _run_verbose builtin cd "$(dirname "$1")"
        else
            builtin cd "$@"
        fi
    }
    _mkdir+cd () {
        mkdir --verbose --parents "$1" && cd "$1"
    }
    _cd-git-top-level() {
        cd "$(git rev-parse --show-toplevel)"
    }
    _cd-venv() {
        : "${VIRTUAL_ENV:?}"
        cd "$VIRTUAL_ENV"
    }
    _cd-site-packages() {
        : "${VIRTUAL_ENV:?}"
        cd "${VIRTUAL_ENV}"/lib/python*/site-packages/
    }
    # Leading commas in function names make shellcheck really unhappy,
    # since leading commas are invalid identifiers… which somehow work
    # just fine in bash 🤷. work around it by using aliases.
    alias ,cd-git-top-level=_cd-git-top-level
    alias ,cd-site-packages=_cd-site-packages
    alias ,cd-venv=_cd-venv
    alias ,mkdir+cd=_mkdir+cd
    alias ...=,cd-git-top-level

    # Callback when a command could not be found.
    command_not_found_handle() {
        local cmd="$1"

        # Magic typo corrector. Handles typos like "gitp ush" and "gitpu sh".
        local autocorrect_cmds="bzr git svn"
        for prefix in $autocorrect_cmds; do
            if [[ "${cmd#$prefix}" == "$cmd" ]]; then
                # prefix is not a prefix of the typed command
                continue
            fi
            _run_verbose "${prefix}" "${cmd#${prefix}}$2" "${@:3}"
            return
        done

        # Too bad
        printf "\e[0;31m%s: command not found\e[0m\n" "$1" >&2
        return 127
    }

    # History
    shopt -s histappend
    export HISTCONTROL=ignorespace:ignoredups
    export HISTSIZE=100000
    export HISTFILESIZE=1000000
    alias h='unset HISTFILE'

    # Require confirmation for possibly destructive operations,
    # and make mv/cp use the current directory as a target by default.
    _mv_cp_helper() {
        cmd="$1"
        shift
        if [[ $# == 1 ]]; then
            _run_verbose command "$cmd" -i "$@" .
        else
            command "$cmd" -i "$@"
        fi
    }
    mv() { _mv_cp_helper mv "$@"; }
    cp() { _mv_cp_helper cp "$@"; }
    alias rm='rm -i'
    export IGNOREEOF=1  # Require twice Ctrl-D to exit.

    # File listings
    # shellcheck disable=SC2010
    if ls --version 2>/dev/null | grep -q -F 'ls (GNU coreutils)'; then
        alias ls='ls --color=auto --group-directories-first'
        alias l='ls -l --color=auto --human-readable --classify --group-directories-first'
        alias ll='ls -l --color=auto --almost-all --classify --group-directories-first'
    else
        alias l='ls -lhF'
        alias ll='ls -lAF'
    fi

    # grep, ripgrep, etc
    alias grep='grep --color=auto'
    alias egrep='egrep --color=auto'
    alias fgrep='fgrep --color=auto'
    export RIPGREP_CONFIG_PATH=~/.config/ripgrep/config
    rg() {
        if [ -t 1 ]; then
            command rg --pretty "$@" | ,pager-if-tty
        else
            command rg "$@"
        fi
    }

    # Process listings and process control
    alias psg='ps auxww |grep -i'
    complete -F _killall psg
    alias k1='kill %1'
    alias k2='kill %2'
    alias k3='kill %3'

    # common chmod invocations
    alias chmod-public='chmod u=rwX,go=rX'
    alias chmod-public-with-group='chmod ug=rwX,o=rX'
    alias chmod-private='chmod u=rwX,go='
    alias chmod-private-with-group='chmod ug=rwX,o='
    alias rchmod-public='chmod -R u=rwX,go=rX'
    alias rchmod-public-with-group='chmod -R ug=rwX,o=rX'
    alias rchmod-private='chmod -R u=rwX,go='
    alias rchmod-private-with-group='chmod -R ug=rwX,o='

    # common chown invocations
    chown-mine () {
        sudo chown "$(id -un):$(id -gn)" "$@"
    }
    rchown-mine () {
        chown-mine -R "$@"
    }

    # Alias expansion also after these commands
    alias sudo='sudo '
    alias nice='nice '
    alias xargs='xargs '

    # Editor
    if ___has vim; then
        export EDITOR=vim
        alias vi=vim
    else
        export EDITOR=vi
    fi
    alias ni=vi
    alias :q='exit'
    alias :e='$EDITOR'
    em () {
        emacs "$@" > /dev/null 2>&1 &
        disown emacs
    }

    # Pager
    alias lessr='less -R'

    # Man pages
    export MANOPT="--no-hyphenation --no-justification"
    man () {
        # Format for the terminal width up to the specified maximum.
        local width
        width=$(printf "%s\n$COLUMNS\n80\n" "$(tput cols)" | grep '^[0-9]\+$' | sort -n | head -1)
        MANWIDTH=$width command man "$@"
    }

    # Detect direnv (https://github.com/direnv/direnv). The regular loading
    # method does not cooperate well with our $PROMPT_COMMAND (it breaks $?
    # detection).
    if ___has direnv; then
        # Copied from "direnv hook bash" output:
        _direnv_hook_enabled=1
        _direnv_hook() {
            if [ $_direnv_hook_enabled == "1" ]; then
                eval "$(direnv export bash)"
            fi
        };
        _direnv_freeze() {
            if [[ $# -eq 1 ]]; then
                echo "direnv: setting up shell environment for directory $1"
                pushd "$1" > /dev/null || return 1
                eval "$(direnv export bash)"
                popd > /dev/null
            fi
            echo "direnv: disabling shell hook; use 'direnv thaw' to enable again"
            _direnv_hook_enabled=0
        }
        _direnv_thaw() {
            echo "direnv: enabling shell hook"
            _direnv_hook_enabled=1
        }
        complete -F _cd _direnv_freeze
        direnv ()
        {
            local command;
            command="$1";
            if [ "$#" -gt 0 ]; then
                shift;
            fi;
            case "$command" in
                '')
                    command direnv
                    ;;
                freeze | thaw)
                    "_direnv_${command}" "$@"
                    ;;
                *)
                    command direnv "${command}" "$@"
                    ;;
            esac
        }
        if [[ -n "${DIRENV_DIR:-}" ]]; then
            # Reload, e.g. ensure $PATH items are in the right order
            echo "direnv: environment potentially tainted; reloading" > /dev/stderr
            direnv reload
        fi
    fi

    # Development
    alias m=make
    complete -F _make m
    if ___has hub; then
        alias git=hub
    fi

    # Docker
    alias ,docker-run-throwaway='docker run --rm --interactive --tty'
    complete -F _complete_alias ,docker-run-throwaway
    alias ,docker-run-throwaway-project='docker run --rm --interactive --tty --volume "$(pwd)":/project'
    complete -F _complete_alias ,docker-run-throwaway-project
    alias ,docker-compose-up-fresh='docker compose up --force-recreate --renew-anon-volumes --pull always'
    ___docker-compose-logs() {
        less -MNRSXfi --exit-follow-on-close --mouse --use-color +F \
            <(docker compose --ansi always logs --follow "$@")
    }
    alias ,docker-compose-logs=___docker-compose-logs

    # Python
    export PYTHONDONTWRITEBYTECODE=1
    if ___has pyenv && [[ $(type -t pyenv) != "function" ]]; then
        # Initialize if pyenv is available but not yet loaded. After
        # initialisation, ‘pyenv’ is a shell function masking the
        # actual executable. Override pyenv's insistence on putting
        # itself at the front op the PATH; that is already set up in
        # my preferred order.
        path_before_pyenv_init="$PATH"
        eval "$(pyenv init -)"
        PATH="$path_before_pyenv_init"
        unset path_before_pyenv_init
    fi
    if ___has virtualenvwrapper_lazy.sh; then
        VIRTUALENVWRAPPER_PYTHON="$(dirname "$(readlink -f "$(which virtualenvwrapper_lazy.sh)")")/python"
        export VIRTUALENVWRAPPER_PYTHON
        # shellcheck disable=SC1091
        source virtualenvwrapper_lazy.sh
    fi
    alias ipy=ipython
    alias pyhton=python
    py-cprofile() {
        if [[ $# -lt 1 ]]; then
            printf "Error: no Python program specified. Usage:\n\n    %s some-program --some-args\n" "${FUNCNAME[0]}" > /dev/stderr
            return
        fi
        local prog="$1"
        shift
        if [[ ! -f "$prog" ]]; then
            prog="$(command -v "$prog")"
        fi
        local profile_file
        profile_file="$(mktemp 'python-cprofile-XXXXXX.prof')"
        python -m cProfile -o "$profile_file" "$prog" "$@"
        echo > /dev/stderr
        printf 'sort cumulative\nstats 30\n' | python -m pstats "$profile_file" 1>&2
        echo > /dev/stderr
        echo "Profile stored in ${profile_file}" > /dev/stderr
    }
    py-pdb() {
        python -m pdb "$(command -v "$1")" "${@:2}"
    }
    py-ipdb() {
        python -m ipdb "$(command -v "$1")" "${@:2}"
    }
    pytestf() {
        _run_verbose pytest --tb=short --color=yes --looponfail --verbose --verbose "$@"
    }

    # data display and conversion
    jq() {
        if [[ -t 1 ]]; then
            command jq --color-output "$@" | ,pager-if-tty
        else
            command jq "$@"
        fi
    }
    yaml-to-json() {
        python -c 'import json, sys, yaml; print(json.dumps(yaml.safe_load(open(sys.argv[1]) if sys.argv[1:] else sys.stdin), indent=2, sort_keys=True))' "$@"
    }
    json-to-yaml() {
        python -c 'import json, sys, yaml; print(yaml.safe_dump(json.load(open(sys.argv[1]) if sys.argv[1:] else sys.stdin), default_flow_style=False))' "$@"
    }

    # Jhbuild
    if ___has jhbuild; then
        alias 'jhr'='jhbuild run'
        alias 'jhbo'='jhbuild buildone'
        alias 'jhboa'='jhbuild buildone -a'
        alias 'jhboac'='jhbuild buildone -a -c'
        alias 'jhs'='jhbuild shell'
    fi

    # GUI applications
    if [[ "$OSTYPE" == darwin* ]]; then
        alias g='open'
    elif [[ -n "$DISPLAY" ]]; then
        alias g='xdg-open'
    fi

    # Locale
    alias locale-none='unset LANG LANGUAGE'
    alias locale-en='unset LANGUAGE; export LANG=en_GB.UTF-8'
    alias locale-nl='unset LANGUAGE; export LANG=nl_NL.UTF-8'

    # Linux package management
    if [ -e /etc/arch-release ]; then
        # Arch Linux
        for arch_package_manager in paru pikaur yay "sudo pacman"; do
            if ___has "$arch_package_manager"; then
                # shellcheck disable=SC2139
                alias i="${arch_package_manager} -S"
                # shellcheck disable=SC2139
                alias u="${arch_package_manager} -Syu"
                break
            fi
        done
        unset arch_package_manager
        complete -F _complete_alias i
        complete -F _complete_alias u
    elif ___has apt-get; then
        # Debian and Ubuntu
        alias apt='sudo apt'
        alias apt-get='sudo apt-get'
        alias aptitude='sudo aptitude'
        alias ac='apt-cache show'
        alias acp='apt-cache policy'
        alias acs='apt-cache search'
        _apt_install() {
            _run_verbose sudo apt install -V "$@"
        }
        _apt_upgrade() {
            (
            set -e
            _run_verbose sudo apt update
            _run_verbose sudo apt upgrade -V
            )
        }
        alias i=_apt_install
        alias u=_apt_upgrade
        _apt_get_packages() {
            local cur
            cur=${COMP_WORDS[COMP_CWORD]}
            COMPREPLY=($(apt-cache --no-generate pkgnames "${cur}" 2>/dev/null))
            return 0
        }
        complete -F _apt_get_packages i ac acp
    fi

    # iTerm profile tricks
    if [[ -n "${ITERM_PROFILE-}" && -z "${INSIDE_EMACS-}" ]]; then
        _ITERM_PROFILE_FILE=~/.config/iterm-profile
        _iterm_profile() {
            printf "\e]50;SetProfile=%s\a" "$1"
            echo "$1" >| ${_ITERM_PROFILE_FILE}
        }
        dark() {
            _iterm_profile "Default"
        }
        light() {
            _iterm_profile "Light"
        }
        if [[ -e ${_ITERM_PROFILE_FILE} ]]; then
            _iterm_profile "$(cat "${_ITERM_PROFILE_FILE}")"
        fi
    fi

    # Show a file with syntax highlighting (when possible) through a pager (when necessary)
    ___syntax_highlight() {
        (
            set -e
            if [[ "$#" == 0 || ("$#" == 1 && "$1" == "-") ]]; then
                # In case no args are specified or only "-" is passed, set "$@" to
                # /dev/stdin so that the logic below works as intended without
                # having to special case the "stdin as a pipe" scenario.
                set - '/dev/stdin';
            fi
            local file
            for file in "$@"; do
                # Only readable, regular files (e.g. not special files like
                # /dev/stdin) can be peeked into.
                local can_peek
                if [[ -f "$file" && -r "$file" ]]; then
                    can_peek="yes"
                else
                    can_peek="no"
                fi
                if [[ -r "$file" ]]; then
                    if [[ "$file" == *.txt ]]; then
                        # Don't try to highlight text files; pygmentize
                        # detection is slow and often wrong for those.
                        true
                    elif ___has pygmentize; then
                        # Try to use pygments/pygmentize for syntax highlighting.
                        local lexer
                        lexer="$(pygmentize -N "$file")"
                        if [[ "$can_peek" == "yes" && "$lexer" == "text" ]]; then
                            # Heuristics to improve pygmentize's detection (which
                            # uses file names only); detect a few file types using
                            # hashbang (#!) lines.
                            case $(head -c 100 "$file" | head -n 1 | grep '^#!') in
                                (*bash*)    lexer="bash" ;;
                                (*make*)    lexer="make" ;;
                                (*node*)    lexer="js" ;;
                                (*perl*)    lexer="perl" ;;
                                (*python*)  lexer="python" ;;
                                (*ruby*)    lexer="ruby" ;;
                                (*sh*)      lexer="sh" ;;
                            esac
                        fi
                        if [[ "$lexer" != "text" ]]; then
                            pygmentize -l "$lexer" "$file"
                            continue
                        fi
                    fi
                fi
                # File not readable or no other viewers found; let "cat" handle
                # it, since it's fast and will show error messages.
                command cat "$file"
            done
        ) | ,pager-if-tty
    }

    # This cat has magical powers, like a space cat flying through pizzas with bacon.
    cat() {
        if [[ $# -ge 1 && "${1}" != -* && -t 1 ]]; then
            # Arguments but no flags are specified and stdout is a terminal; perform magic.
            if ___has bat; then
                bat "$@"
            else
                ___syntax_highlight "$@"
            fi
        else
            # Transparent fall-back.
            command cat "$@"
        fi
    }

    # systemd
    alias ,sc='sudo systemctl'
    alias ,scu='systemctl --user'
    alias ,jb='journalctl --boot --pager-end --lines=all'
    alias ,jf='journalctl --pager-end --follow'
    complete -F _complete_alias ,sc
    complete -F _complete_alias ,scu

    # tmux
    tmux() {
        # Turn plain "tmux" into "tmux attach" to automatically attach a
        # session (in conjunction with "new-session" in tmux.conf).
        if [[ $# == 0 ]]; then
            _run_verbose command tmux attach-session
        else
            command tmux "$@"
        fi
    }
    alias itmux='tmux -CC attach-session'  # iTerm2 tmux support

    # Readable $PATH (or similar variables)
    echopath() {
        local value="${1:-${PATH}}"
        echo -e "${value//:/\\n}"
    }

    # Disable Ctrl-S/Ctrl-Q. The past is not the future.
    stty -ixon

    # Misc
    alias sc='screen -UxRR'
    alias uuid4='uuidgen -r'
    ___has sudoedit || alias sudoedit="sudo -e"
    ___has hd || alias hd="hexdump"
    ___has rgrep || alias rgrep="grep -r"
    ___has zstd && alias ,zstd-max="zstd --threads=0 --long -19"

    # 31337 hacking the matrix
    if ___has unimatrix && ps -p "$PPID" | command grep -q cool-retro-term; then
        unimatrix --flashers --ignore-keyboard --single-wave --speed 98
    fi
fi


#
# Host-specific Configuration
#
# Machine-specific configuration (not kept in version control). The
# bashrc-$HOSTNAME variant is useful for machine specific configuration
# if the home directory is shared over NFS.
#

for file in ~/.bashrc-local "${HOME}/.bashrc-${HOSTNAME}"; do
    if [[ -f "$file" ]]; then
        # shellcheck disable=SC1090
        source "$file"
    fi
done
unset file

# Force $? to be 0 (for the initial PS1)
true
